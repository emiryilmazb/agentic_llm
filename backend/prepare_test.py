"""
Script to prepare for testing the streaming endpoint.
This script ensures database tables exist, checks for existing conversations,
and creates one if needed.
"""
import sys
import time # time modülünü ekle
from pathlib import Path
from sqlalchemy.orm import Session

# Add parent directory to sys.path for imports
sys.path.append(str(Path(__file__).parent))

from app.db.base import get_db
from app.services.conversation_service import ConversationService
from app.services.character_service import CharacterService
from app.db.init_db import create_tables

def prepare_test_conversation():
    """Initialize database and prepare a conversation for testing."""
    # First, create the database tables if they don't exist
    print("Initializing database tables...")
    create_tables()
    print("Database tables created.")
    
    db = next(get_db())
    
    try:
        # Get all conversations
        all_conversations = ConversationService.get_all_conversations(db)
        
        if all_conversations:
            print("Existing conversations found:")
            for conv in all_conversations:
                print(f"  ID: {conv['id']}, Title: {conv['title']}")
            
            # Use the first conversation for testing
            print(f"\nUsing conversation ID {all_conversations[0]['id']} for testing.")
            return all_conversations[0]['id']
        else:
            print("No conversations found. Creating a test conversation...")
            
            # Get all character names
            character_names = CharacterService.get_all_characters(db)
            
            if not character_names:
                print("No characters found. Creating a test character...")
                
                # Character details
                name = "TestCharacter"
                personality = "Helpful and friendly"
                background = "Created for streaming API testing"
                prompt = "You are a test character designed to assist with API testing."
                
                # Create the character
                CharacterService.save_character(
                    db,
                    name=name,
                    background=background,
                    personality=personality,
                    prompt=prompt,
                    use_agentic=False
                )
                print(f"Created test character '{name}'.")
                character_name = name
            else:
                character_name = character_names[0]
                print(f"Using existing character: {character_name}")
            
            # Create a test conversation
            conv = ConversationService.create_conversation(
                db, 
                character_name=character_name,
                title="Test Conversation for Streaming API"
            )
            
            if conv:
                print(f"DEBUG: Created test conversation object: {conv}")
                print(f"Created test conversation with ID {conv['id']}")
                
                # Verify the conversation exists in the database immediately after creation
                db.refresh(conv) # Refresh the object to ensure it reflects the database state
                verified_conv = ConversationService.get_conversation(db, conv['id'])
                if verified_conv:
                    print(f"DEBUG: Verified conversation with ID {verified_conv['id']} exists in DB after creation.")
                else:
                    print(f"DEBUG: Verification failed: Conversation with ID {conv['id']} NOT found in DB after creation.")
                    
                return conv['id']
            else:
                print("Failed to create test conversation.")
                return None
    
    except Exception as e:
        print(f"Error preparing test: {str(e)}")
        return None

if __name__ == "__main__":
    conversation_id = prepare_test_conversation()
    
    if conversation_id:
        print(f"\nReady for testing! Use conversation ID {conversation_id} in test_streaming.py")
        
        # Update the ID in test_streaming.py
        try:
            with open("test_streaming.py", "r") as f:
                content = f.read()
            
            # Replace the CONVERSATION_ID line
            updated_content = content.replace(
                "CONVERSATION_ID = 1  # Replace with an actual conversation ID that exists in your database",
                f"CONVERSATION_ID = {conversation_id}  # Generated by prepare_test.py"
            )
            
            with open("test_streaming.py", "w") as f:
                f.write(updated_content)
                
            print("Updated test_streaming.py with the correct conversation ID.")
        except Exception as e:
            print(f"Failed to update test_streaming.py: {str(e)}")
            print(f"Please manually set CONVERSATION_ID = {conversation_id} in test_streaming.py")
    else:
        print("Test preparation failed.")
